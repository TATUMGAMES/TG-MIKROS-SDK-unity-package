// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name mikros_framework_ios
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import CoreData
import CoreLocation
import Foundation
import Network
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_exported import mikros_framework_ios
@objc @_inheritsConvenienceInitializers @objcMembers final public class UserMetadataBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(latitude: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(longitude: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceBattery: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceModel: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceOS: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceOSVersion: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceOrientation: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceScreenDpi: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceScreenHeight: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(deviceScreenWidth: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(sdkType: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func set(isWifi: Swift.String?) -> mikros_framework_ios.UserMetadataBuilder
  @objc final public func create() throws -> mikros_framework_ios.UserMetadata
  @objc deinit
}
extension mikros_framework_ios.UserMetadata {
  public enum IllegalArgumentException : Swift.Error {
    case latitude
    case longitude
    case deviceBattery
    case deviceModel
    case deviceOS
    case deviceOSVersion
    case deviceOrientation
    case deviceScreenDpi
    case deviceScreenHeight
    case deviceScreenWidth
    case sdkType
    case isWifi
    public static func == (a: mikros_framework_ios.UserMetadata.IllegalArgumentException, b: mikros_framework_ios.UserMetadata.IllegalArgumentException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.UserMetadata.IllegalArgumentException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @objc(MikrosGameplayEntity) public class MikrosGameplayEntity : CoreData.NSManagedObject, Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct UncaughtException : Swift.Codable, Swift.Equatable {
  public static func == (a: mikros_framework_ios.UncaughtException, b: mikros_framework_ios.UncaughtException) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public protocol MikrosAnalyticsSessionConfigurationProperties {
  @objc func updateSessionLogging(isEnabled: Swift.Bool)
  @objc func updateSessionTimeout(sessionTimeout: Swift.Int)
  @objc func updateMinimumSessionLengthValidity(minimumSessionLengthValidity: Swift.Int)
  @objc func getAnalyticsSessionConfiguration() -> mikros_framework_ios.AnalyticsSessionConfiguration
  @objc func updateAnalyticsConfiguration(analyticsSessionConfiguration: mikros_framework_ios.AnalyticsSessionConfiguration)
}
@objc public protocol MikrosAnalyticsGameplayLogger : mikros_framework_ios.MikrosAnalyticsGameplayConfigurationProperties {
  @objc func flushGameplayEvents()
}
@_hasMissingDesignatedInitializers @objc final public class MikrosEvent : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AnalyticsExceptionConfiguration : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AnalyticsExceptionConfigurationBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(eventLogging: Swift.Bool) -> mikros_framework_ios.AnalyticsExceptionConfigurationBuilder
  @objc final public func create() throws -> mikros_framework_ios.AnalyticsExceptionConfiguration
  @objc deinit
}
extension mikros_framework_ios.MikrosCrash {
  public enum IllegalArgumentException : Swift.Error {
    case customCrash
    public static func == (a: mikros_framework_ios.MikrosCrash.IllegalArgumentException, b: mikros_framework_ios.MikrosCrash.IllegalArgumentException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.MikrosCrash.IllegalArgumentException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ClientConfigurationBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(apiKey: Swift.String?) -> mikros_framework_ios.ClientConfigurationBuilder
  @objc final public func set(baseUrl: Swift.String?) -> mikros_framework_ios.ClientConfigurationBuilder
  @objc final public func set(appGameId: Swift.String?) -> mikros_framework_ios.ClientConfigurationBuilder
  @objc final public func set(apiKeyType: Swift.String?) -> mikros_framework_ios.ClientConfigurationBuilder
  @objc final public func set(deviceId: Swift.String?) -> mikros_framework_ios.ClientConfigurationBuilder
  @objc final public func set(appVersion: Swift.String?) -> mikros_framework_ios.ClientConfigurationBuilder
  @objc final public func set(sdkVersion: Swift.String?) -> mikros_framework_ios.ClientConfigurationBuilder
  @objc final public func create() throws -> mikros_framework_ios.ClientConfiguration
  @objc deinit
}
extension mikros_framework_ios.ClientConfiguration {
  public enum IllegalArgumentException : Swift.Error {
    case apiKey
    case baseUrl
    case appGameId
    case apiKeyType
    case deviceId
    case appVersion
    case sdkVersion
    public static func == (a: mikros_framework_ios.ClientConfiguration.IllegalArgumentException, b: mikros_framework_ios.ClientConfiguration.IllegalArgumentException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.ClientConfiguration.IllegalArgumentException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AnalyticsEventConfiguration : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AnalyticsConfigurationBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(minimumQueueSize: Swift.Int) -> mikros_framework_ios.AnalyticsConfigurationBuilder
  @objc final public func set(maximumQueueSize: Swift.Int) -> mikros_framework_ios.AnalyticsConfigurationBuilder
  @objc final public func set(recurringTaskInMinutes: Swift.Int64) -> mikros_framework_ios.AnalyticsConfigurationBuilder
  @objc final public func set(eventLogging: Swift.Bool) -> mikros_framework_ios.AnalyticsConfigurationBuilder
  @objc final public func create() throws -> mikros_framework_ios.AnalyticsEventConfiguration
  @objc deinit
}
extension mikros_framework_ios.AnalyticsEventConfiguration {
  public enum IllegalArgumentException : Swift.Error {
    case minQueue
    case maxQueue
    case recurringTask
    public static func == (a: mikros_framework_ios.AnalyticsEventConfiguration.IllegalArgumentException, b: mikros_framework_ios.AnalyticsEventConfiguration.IllegalArgumentException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.AnalyticsEventConfiguration.IllegalArgumentException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class MikrosApiClient : mikros_framework_ios.BaseApiClient {
  @objc deinit
}
extension mikros_framework_ios.MikrosApiClient : mikros_framework_ios.MikrosApiClientProtocol {
  @objc final public func getClientConfiguration() -> mikros_framework_ios.ClientConfiguration
  @objc final public func updateClientConfiguration(clientConfiguration: mikros_framework_ios.ClientConfiguration)
  @objc final public func updateApiKey(apiKey: Swift.String?)
  @objc final public func updateBaseUrl(baseUrl: Swift.String?)
  @objc final public func updateAppGameId(appGameId: Swift.String?)
  @objc final public func updateApiKeyType(apiKeyType: Swift.String?)
  @objc final public func updateDeviceId(deviceId: Swift.String?)
  @objc final public func updateAppVersion(appVersion: Swift.String?)
  @objc final public func updateSdkVersion(sdkVersion: Swift.String?)
  @objc final public func updateUserMetadata(userMetadata: mikros_framework_ios.UserMetadata)
  @objc final public func updateCrashEventLogging(isEnabled: Swift.Bool)
  @objc final public func logEvent(_ event: mikros_framework_ios.MikrosEvent?)
  @objc final public func flushEvents()
  @objc final public func updateEventLogging(isEnabled: Swift.Bool)
  @objc final public func updateMinimumQueueSize(minimumQueueSize: Swift.Int)
  @objc final public func updateMaximumQueueSize(maximumQueueSize: Swift.Int)
  @objc final public func updateRecurringTaskInMinutes(recurringTaskInMinutes: Swift.Int64)
  @objc final public func getAnalyticsConfiguration() -> mikros_framework_ios.AnalyticsEventConfiguration
  @objc final public func updateAnalyticsConfiguration(analyticsConfiguration: mikros_framework_ios.AnalyticsEventConfiguration)
  @objc final public func flushMemoryEvents()
  @objc final public func updateMemoryLogging(isEnabled: Swift.Bool)
  @objc final public func updateMemoryMinimumQueueSize(minimumQueueSize: Swift.Int)
  @objc final public func updateMemoryMaximumQueueSize(maximumQueueSize: Swift.Int)
  @objc final public func updateMemoryRecurringTaskInMinutes(recurringTaskInMinutes: Swift.Int64)
  @objc final public func getAnalyticsMemoryConfiguration() -> mikros_framework_ios.AnalyticsMemoryConfiguration
  @objc final public func updateAnalyticsMemoryConfiguration(analyticsMemoryConfiguration: mikros_framework_ios.AnalyticsMemoryConfiguration)
  @objc final public func onMotionEvent()
  @objc final public func flushSessionEvents()
  @objc final public func updateSessionLogging(isEnabled: Swift.Bool)
  @objc final public func updateSessionTimeout(sessionTimeout: Swift.Int)
  @objc final public func updateMinimumSessionLengthValidity(minimumSessionLengthValidity: Swift.Int)
  @objc final public func getAnalyticsSessionConfiguration() -> mikros_framework_ios.AnalyticsSessionConfiguration
  @objc final public func updateAnalyticsConfiguration(analyticsSessionConfiguration: mikros_framework_ios.AnalyticsSessionConfiguration)
  @objc final public func getAnalyticsExceptionConfiguration() -> mikros_framework_ios.AnalyticsExceptionConfiguration
  @objc final public func updateAnalyticsExceptionConfiguration(analyticssExceptionConfiguration: mikros_framework_ios.AnalyticsExceptionConfiguration)
  @objc final public func flushGameplayEvents()
  @objc final public func updateGameplayLogging(isEnabled: Swift.Bool)
  @objc final public func getAnalyticsGameplayConfiguration() -> mikros_framework_ios.AnalyticsGameplayConfiguration
  @objc final public func updateAnalyticsConfiguration(analyticsGameplayConfiguration: mikros_framework_ios.AnalyticsGameplayConfiguration)
}
@_hasMissingDesignatedInitializers final public class CommonAnalyticsEventConfigurationProperties {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class BaseApiClient : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AnalyticsMemoryConfiguration : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AnalyticsMemoryConfigurationBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(minimumQueueSize: Swift.Int) -> mikros_framework_ios.AnalyticsMemoryConfigurationBuilder
  @objc final public func set(maximumQueueSize: Swift.Int) -> mikros_framework_ios.AnalyticsMemoryConfigurationBuilder
  @objc final public func set(recurringTaskInMinutes: Swift.Int64) -> mikros_framework_ios.AnalyticsMemoryConfigurationBuilder
  @objc final public func set(eventLogging: Swift.Bool) -> mikros_framework_ios.AnalyticsMemoryConfigurationBuilder
  @objc final public func create() throws -> mikros_framework_ios.AnalyticsMemoryConfiguration
  @objc deinit
}
extension mikros_framework_ios.AnalyticsMemoryConfiguration {
  public enum IllegalArgumentException : Swift.Error {
    case minQueue
    case maxQueue
    case recurringTask
    public static func == (a: mikros_framework_ios.AnalyticsMemoryConfiguration.IllegalArgumentException, b: mikros_framework_ios.AnalyticsMemoryConfiguration.IllegalArgumentException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.AnalyticsMemoryConfiguration.IllegalArgumentException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public protocol MikrosAnalyticsExceptionLogger : mikros_framework_ios.MikrosAnalyticsExceptionConfigurationProperties {
  @objc func updateCrashEventLogging(isEnabled: Swift.Bool)
  @objc func getAnalyticsExceptionConfiguration() -> mikros_framework_ios.AnalyticsExceptionConfiguration
  @objc func updateAnalyticsExceptionConfiguration(analyticssExceptionConfiguration: mikros_framework_ios.AnalyticsExceptionConfiguration)
}
@objc public protocol MikrosAnalyticsEventConfigurationProperties {
  @objc func updateEventLogging(isEnabled: Swift.Bool)
  @objc func updateMinimumQueueSize(minimumQueueSize: Swift.Int)
  @objc func updateMaximumQueueSize(maximumQueueSize: Swift.Int)
  @objc func updateRecurringTaskInMinutes(recurringTaskInMinutes: Swift.Int64)
  @objc func getAnalyticsConfiguration() -> mikros_framework_ios.AnalyticsEventConfiguration
  @objc func updateAnalyticsConfiguration(analyticsConfiguration: mikros_framework_ios.AnalyticsEventConfiguration)
}
@objc @_inheritsConvenienceInitializers public class MikrosMemoryEntity : CoreData.NSManagedObject, Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum LogLevel {
  case none
  case debug
  case info
  case warning
  case error
  public static func == (a: mikros_framework_ios.LogLevel, b: mikros_framework_ios.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Logger {
  public static func log(_ message: Swift.String, level: mikros_framework_ios.LogLevel = .none)
  public static func log(_ array: [Swift.String], level: mikros_framework_ios.LogLevel = .none)
}
public struct StackSymbolParser {
  public init(exception: Foundation.NSException, bundleId: Swift.String)
}
@_hasMissingDesignatedInitializers final public class CommonAnalyticsExceptionConfigurationProperties {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AnalyticsSessionConfiguration : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AnalyticsSessionConfigurationBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(sessionTimeout: Swift.Int) -> mikros_framework_ios.AnalyticsSessionConfigurationBuilder
  @objc final public func set(minimumSessionLengthValidity: Swift.Int) -> mikros_framework_ios.AnalyticsSessionConfigurationBuilder
  @objc final public func set(eventLogging: Swift.Bool) -> mikros_framework_ios.AnalyticsSessionConfigurationBuilder
  @objc final public func create() throws -> mikros_framework_ios.AnalyticsSessionConfiguration
  @objc deinit
}
extension mikros_framework_ios.AnalyticsSessionConfiguration {
  public enum IllegalArgumentException : Swift.Error {
    case sessionTimeout
    case minimumSessionLengthValidity
    public static func == (a: mikros_framework_ios.AnalyticsSessionConfiguration.IllegalArgumentException, b: mikros_framework_ios.AnalyticsSessionConfiguration.IllegalArgumentException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.AnalyticsSessionConfiguration.IllegalArgumentException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AnalyticsGameplayConfiguration : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AnalyticsGameplayConfigurationBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(eventLogging: Swift.Bool) -> mikros_framework_ios.AnalyticsGameplayConfigurationBuilder
  @objc final public func create() throws -> mikros_framework_ios.AnalyticsGameplayConfiguration
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CommonAnalyticsSessionConfigurationProperties {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CommonAnalyticsMemoryConfigurationProperties {
  @objc deinit
}
public class NetworkDectection {
  public init()
  public func isConnectedToNetwork() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class MikrosEventBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func set(event: Swift.String?) -> mikros_framework_ios.MikrosEventBuilder
  @objc final public func create() throws -> mikros_framework_ios.MikrosEvent
  @objc deinit
}
extension mikros_framework_ios.MikrosEvent {
  public enum IllegalArgumentException : Swift.Error {
    case event
    public static func == (a: mikros_framework_ios.MikrosEvent.IllegalArgumentException, b: mikros_framework_ios.MikrosEvent.IllegalArgumentException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.MikrosEvent.IllegalArgumentException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class ClientConfiguration : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CommonAnalyticsGameplayConfigurationProperties {
  @objc deinit
}
@objc public protocol MikrosAnalyticsGameplayConfigurationProperties {
  @objc func updateGameplayLogging(isEnabled: Swift.Bool)
  @objc func getAnalyticsGameplayConfiguration() -> mikros_framework_ios.AnalyticsGameplayConfiguration
  @objc func updateAnalyticsConfiguration(analyticsGameplayConfiguration: mikros_framework_ios.AnalyticsGameplayConfiguration)
}
@objc public protocol MikrosAnalyticsMemoryLogger : mikros_framework_ios.MikrosAnalyticsMemoryConfigurationProperties {
  @objc func flushMemoryEvents()
}
@objc public protocol MikrosAnalyticsSessionLogger : mikros_framework_ios.MikrosAnalyticsSessionConfigurationProperties {
  @objc func onMotionEvent()
  @objc func flushSessionEvents()
}
extension mikros_framework_ios.MikrosGameplayEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<mikros_framework_ios.MikrosGameplayEntity>
  @objc @NSManaged dynamic public var gameplayStartTime: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gameplayEndTime: Swift.String? {
    @objc get
    @objc set
  }
}
@objc public protocol MikrosApiClientProtocol : ObjectiveC.NSObjectProtocol, mikros_framework_ios.MikrosAnalyticsEventLogger, mikros_framework_ios.MikrosAnalyticsExceptionLogger, mikros_framework_ios.MikrosAnalyticsGameplayLogger, mikros_framework_ios.MikrosAnalyticsMemoryLogger, mikros_framework_ios.MikrosAnalyticsSessionLogger {
  @objc func getClientConfiguration() -> mikros_framework_ios.ClientConfiguration
  @objc func updateClientConfiguration(clientConfiguration: mikros_framework_ios.ClientConfiguration)
  @objc func updateApiKey(apiKey: Swift.String?)
  @objc func updateBaseUrl(baseUrl: Swift.String?)
  @objc func updateAppGameId(appGameId: Swift.String?)
  @objc func updateApiKeyType(apiKeyType: Swift.String?)
  @objc func updateDeviceId(deviceId: Swift.String?)
  @objc func updateAppVersion(appVersion: Swift.String?)
  @objc func updateSdkVersion(sdkVersion: Swift.String?)
  @objc func updateUserMetadata(userMetadata: mikros_framework_ios.UserMetadata)
}
@_hasMissingDesignatedInitializers @objc final public class UserMetadata : ObjectiveC.NSObject {
  @objc deinit
}
@objc public protocol MikrosAnalyticsEventLogger : mikros_framework_ios.MikrosAnalyticsEventConfigurationProperties {
  @objc func logEvent(_ eventRequest: mikros_framework_ios.MikrosEvent?)
  @objc func flushEvents()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NetworkSpeedTest : UIKit.UIViewController, Foundation.URLSessionDelegate, Foundation.URLSessionDataDelegate {
  public typealias SpeedTestCompletionHandler = (_ megabytesPerSecond: Swift.Double?, _ error: Swift.Error?) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func checkForSpeedTest()
  @_Concurrency.MainActor(unsafe) public func testDownloadSpeedWithTimout(timeout: Foundation.TimeInterval, withCompletionBlock: @escaping mikros_framework_ios.NetworkSpeedTest.SpeedTestCompletionHandler)
  @_Concurrency.MainActor(unsafe) public func testDownloadSpeed(withCompletionBlock: @escaping mikros_framework_ios.NetworkSpeedTest.SpeedTestCompletionHandler)
  @_Concurrency.MainActor(unsafe) @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @_Concurrency.MainActor(unsafe) @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol MikrosAnalyticsMemoryConfigurationProperties {
  @objc func updateMemoryLogging(isEnabled: Swift.Bool)
  @objc func updateMemoryMinimumQueueSize(minimumQueueSize: Swift.Int)
  @objc func updateMemoryMaximumQueueSize(maximumQueueSize: Swift.Int)
  @objc func updateMemoryRecurringTaskInMinutes(recurringTaskInMinutes: Swift.Int64)
  @objc func getAnalyticsMemoryConfiguration() -> mikros_framework_ios.AnalyticsMemoryConfiguration
  @objc func updateAnalyticsMemoryConfiguration(analyticsMemoryConfiguration: mikros_framework_ios.AnalyticsMemoryConfiguration)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MikrosApiClientProvider : ObjectiveC.NSObject {
  @objc public static func initialize(clientConfiguration: mikros_framework_ios.ClientConfiguration, analyticsEventConfiguration: mikros_framework_ios.AnalyticsEventConfiguration? = nil, analyticsSessionConfiguration: mikros_framework_ios.AnalyticsSessionConfiguration? = nil, analyticsMemoryConfiguration: mikros_framework_ios.AnalyticsMemoryConfiguration? = nil, analyticsExceptionConfiguration: mikros_framework_ios.AnalyticsExceptionConfiguration? = nil, analyticsGameplayConfiguration: mikros_framework_ios.AnalyticsGameplayConfiguration? = nil) throws
  @objc public static func getInstance() throws -> mikros_framework_ios.MikrosApiClientProtocol
  @objc override dynamic public init()
  @objc deinit
}
extension mikros_framework_ios.MikrosApiClientProvider {
  public enum IllegalStateException : Swift.Error {
    case alreadyInitialized
    case notInitialized
    public static func == (a: mikros_framework_ios.MikrosApiClientProvider.IllegalStateException, b: mikros_framework_ios.MikrosApiClientProvider.IllegalStateException) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension mikros_framework_ios.MikrosApiClientProvider.IllegalStateException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class MikrosCrash {
  @objc deinit
}
@objc public protocol MikrosAnalyticsExceptionConfigurationProperties {
  @objc func updateCrashEventLogging(isEnabled: Swift.Bool)
  @objc func getAnalyticsExceptionConfiguration() -> mikros_framework_ios.AnalyticsExceptionConfiguration
  @objc func updateAnalyticsExceptionConfiguration(analyticssExceptionConfiguration: mikros_framework_ios.AnalyticsExceptionConfiguration)
}
extension mikros_framework_ios.UserMetadata.IllegalArgumentException : Swift.Equatable {}
extension mikros_framework_ios.UserMetadata.IllegalArgumentException : Swift.Hashable {}
extension mikros_framework_ios.MikrosCrash.IllegalArgumentException : Swift.Equatable {}
extension mikros_framework_ios.MikrosCrash.IllegalArgumentException : Swift.Hashable {}
extension mikros_framework_ios.ClientConfiguration.IllegalArgumentException : Swift.Equatable {}
extension mikros_framework_ios.ClientConfiguration.IllegalArgumentException : Swift.Hashable {}
extension mikros_framework_ios.AnalyticsEventConfiguration.IllegalArgumentException : Swift.Equatable {}
extension mikros_framework_ios.AnalyticsEventConfiguration.IllegalArgumentException : Swift.Hashable {}
extension mikros_framework_ios.AnalyticsMemoryConfiguration.IllegalArgumentException : Swift.Equatable {}
extension mikros_framework_ios.AnalyticsMemoryConfiguration.IllegalArgumentException : Swift.Hashable {}
extension mikros_framework_ios.LogLevel : Swift.Equatable {}
extension mikros_framework_ios.LogLevel : Swift.Hashable {}
extension mikros_framework_ios.AnalyticsSessionConfiguration.IllegalArgumentException : Swift.Equatable {}
extension mikros_framework_ios.AnalyticsSessionConfiguration.IllegalArgumentException : Swift.Hashable {}
extension mikros_framework_ios.MikrosEvent.IllegalArgumentException : Swift.Equatable {}
extension mikros_framework_ios.MikrosEvent.IllegalArgumentException : Swift.Hashable {}
extension mikros_framework_ios.MikrosApiClientProvider.IllegalStateException : Swift.Equatable {}
extension mikros_framework_ios.MikrosApiClientProvider.IllegalStateException : Swift.Hashable {}
